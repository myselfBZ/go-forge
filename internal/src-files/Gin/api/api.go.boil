package main

import (
	"context"
	"errors"
	"{{ . }}/internal/auth"
	"{{ . }}/internal/env"
	"{{ . }}/internal/store"
	"{{ . }}/internal/store/cache"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"go.uber.org/zap"
)

type application struct {
    config config
    logger *zap.SugaredLogger
    storage     store.Storage
    authenticator auth.Authenticator
    cacheStorage  cache.Storage
}

type config struct {
	addr string
    
	db          dbConfig
	env         string
	apiURL      string
	frontendURL string
	auth        authConfig
	redisCfg    redisConfig
}

type redisConfig struct {
	addr    string
	pw      string
	db      int
	enabled bool
}



type dbConfig struct {
	addr         string
	maxOpenConns int
	maxIdleConns int
	maxIdleTime  string
}

type authConfig struct {
	token tokenConfig
}


type tokenConfig struct {
	secret string
	exp    time.Duration
	iss    string
}

func (app *application) registerRoutes(e *gin.Engine) {

    e.Use(cors.New(cors.Config{
        AllowOrigins: []string{ env.GetString("CORS_ALLOWED_ORIGIN", "http://localhost:5173")},
        AllowMethods: []string{"GET", "PUT", "PATCH", "DELETE", "POST"},
        AllowHeaders: []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
        AllowCredentials: false,
        ExposeHeaders: []string{"Link"},
        MaxAge: 300,
    }))

    e.GET("/health", app.healthHandler)
    
    v1 := e.Group("/v1")

    auth := v1.Group("/authentication")

    auth.POST("/users", app.registerUserHandler)
    auth.POST("/token", app.createTokenHandler)

    user := v1.Group("/users", app.AuthTokenMiddleware())
    user.GET("/:id", app.getUserHandler)
}

func (app *application) run() error {
    router := gin.Default()
    app.registerRoutes(router)

    srv := &http.Server{
        Addr: app.config.addr,
        Handler:      router,
		WriteTimeout: time.Second * 30,
		ReadTimeout:  time.Second * 10,
		IdleTimeout:  time.Minute,
    }

    shutdown := make(chan error)

	go func() {
		quit := make(chan os.Signal, 1)

		signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
		s := <-quit

		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()

		app.logger.Infow("signal caught", "signal", s.String())

        shutdown <- srv.Shutdown(ctx)
	}()

	app.logger.Infow("server has started", "addr", app.config.addr, "env", app.config.env)

	err := srv.ListenAndServe()

	if !errors.Is(err, http.ErrServerClosed) {
		return err
	}

	err = <-shutdown
	if err != nil {
		return err
	}

	app.logger.Infow("server has stopped", "addr", app.config.addr, "env", app.config.env)

    return nil
}
