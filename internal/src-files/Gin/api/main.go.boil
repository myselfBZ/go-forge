package main

import (
	"{{ . }}/internal/auth"
	"{{ . }}/internal/db"
	"{{ . }}/internal/env"
	"{{ . }}/internal/store"
	"{{ . }}/internal/store/cache"

	_ "github.com/joho/godotenv/autoload"

	"go.uber.org/zap"
)


func main(){
    cfg := config{
        env: env.GetString("ENV", "dev"),
        apiURL: env.GetString("EXTERNAL_URL", "localhost:6969"),
        frontendURL: env.GetString("FROTNEND_URL", "http://localhost:5173"),
        addr: "localhost:6969",
        auth: authConfig{
            token: tokenConfig{
            },
        },
        db: dbConfig{
            addr: env.GetString("DB_ADDR", "postgres://postgres:new_password@localhost:32768/myproject?sslmode=disable"),
            maxOpenConns: env.GetInt("DB_MAX_OPEN_CONNS", 30),
            maxIdleConns: env.GetInt("DB_MAX_IDLE_CONNS", 30),
            maxIdleTime: env.GetString("DB_MAX_IDLE_TIME", "15m"),
        },

        redisCfg: redisConfig{
            addr: env.GetString("REDIS_ADDR", "localhost:6379"),
            enabled: env.GetBool("REDIS_ENABLES", true),
            db: env.GetInt("REDIS_DB", 0),
            pw: env.GetString("REDIS_PW", ""),
        },
    }
    logger := zap.Must(zap.NewProduction()).Sugar()

    db, err := db.New(cfg.db.addr, cfg.db.maxOpenConns, cfg.db.maxIdleConns, cfg.db.maxIdleTime)
    if err != nil{
        logger.Fatal("couldn't connect to db: ", err)
    }

    redis := cache.NewRedisClient(cfg.addr, cfg.redisCfg.addr, cfg.redisCfg.db)

    app := application{
        config: cfg,
        logger: logger,
        storage: store.NewStorage(db),
        cacheStorage: cache.NewRedisStorage(redis),
        authenticator: auth.NewJWTAuthenticator(cfg.auth.token.secret, cfg.auth.token.iss, cfg.auth.token.iss),
    }

    logger.Fatal(app.run())
}
